{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.querySelector('#datetime-picker')\nconst buttonStart = document.querySelector('[data-start]')\nconst daysSpan = document.querySelector('[data-days]')\nconst hoursSpan = document.querySelector('[data-hours]')\nconst minutesSpan = document.querySelector('[data-minutes]')\nconst secondsSpan = document.querySelector('[data-seconds]')\n\n\nlet timerId\nlet userSelectedDate\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) { //Втроенный метод flatpickr, который принимает массив (в данном случае выбирается одна дата и берется первый элемент масссива)\n        const selectedDate = selectedDates[0];\n        if(selectedDate <= new Date()){\n            iziToast.error({\n                title: 'error',\n                message: 'Please choose a date in the future'\n            });\n            buttonStart.disabled = true;\n        } else {\n            userSelectedDate = selectedDate;\n            buttonStart.disabled = false;\n        }\n    },\n  };\n\n  flatpickr(datetimePicker, options)\n\n  buttonStart.addEventListener('click', handleStartingBtn)\n\nfunction handleStartingBtn(){\n    buttonStart.disabled = true;\n    datetimePicker.disabled = true;\n\n    timerId = setInterval(() => {\n        const currentTime = new Date()\n        const timeDifference = userSelectedDate - currentTime\n\n        if(timeDifference <= 0){\n            clearInterval(timerId);\n            datetimePicker.disabled = false;\n            return;\n        }\n\n        const time = convertMs(timeDifference)\n        updateTimerDisplay(time)\n    },1000)\n}\n\n\n  function convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n\n  function updateTimerDisplay({days, hours, minutes, seconds}){\n    daysSpan.textContent = addLeadingZero(days)\n    hoursSpan.textContent = addLeadingZero(hours)\n    minutesSpan.textContent = addLeadingZero(minutes)\n    secondsSpan.textContent = addLeadingZero(seconds)\n  }\n\n  function addLeadingZero(value){\n    return String(value).padStart(2,0)\n  }\n  \n  console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n  console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n  console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n\n\n  /**\n   * Алгоритм построения таймера обратного отсчета\nИмпорт библиотек:\n\nИмпортируйте необходимые библиотеки для выбора даты (Flatpickr) и для отображения уведомлений (IziToast).\nИмпортируйте соответствующие CSS-файлы для стилизации.\nОпределение переменных:\n\nПолучите ссылки на элементы DOM, которые будете использовать (например, поле выбора даты, кнопку запуска, и элементы для отображения оставшихся дней, часов, минут и секунд).\nСоздайте переменные для хранения идентификатора таймера и выбранной пользователем даты.\nНастройка Flatpickr:\n\nСоздайте объект настроек для Flatpickr, включая:\nВключение выбора времени.\nУстановку текущей даты как значения по умолчанию.\nОбработчик события onClose, который проверяет, выбрана ли дата в будущем. Если нет, выводите уведомление и отключайте кнопку.\nИнициализация Flatpickr:\n\nПримените настройки к полю выбора даты, используя функцию flatpickr.\nДобавление обработчика события на кнопку:\n\nПривяжите обработчик события click к кнопке запуска. Этот обработчик будет запускать таймер.\nФункция запуска таймера:\n\nВ обработчике события отключите кнопку и поле выбора даты.\nИспользуйте setInterval для запуска таймера каждую секунду.\nВнутри таймера:\nПолучите текущее время и вычислите разницу между выбранной датой и текущим временем.\nЕсли разница меньше или равна нулю, очистите интервал и включите поле выбора даты.\nВ противном случае, преобразуйте разницу времени в дни, часы, минуты и секунды, и обновите отображение.\nФункция преобразования миллисекунд:\n\nСоздайте функцию convertMs, которая принимает миллисекунды и преобразует их в дни, часы, минуты и секунды.\nФункция обновления отображения таймера:\n\nСоздайте функцию updateTimerDisplay, которая обновляет текстовое содержимое элементов, отображающих оставшееся время.\nФункция добавления ведущего нуля:\n\nСоздайте функцию addLeadingZero, которая добавляет ноль перед числом, если оно меньше 10.\nТестирование функций:\n\nПротестируйте функцию convertMs, выводя результаты в консоль, чтобы убедиться, что преобразование выполняется корректно.\nПримерный код\nКод можно разделить на функции, чтобы сделать его более структурированным и читаемым. Каждая функция выполняет отдельную задачу, что упрощает отладку и понимание.\n   */"],"names":["datetimePicker","buttonStart","daysSpan","hoursSpan","minutesSpan","secondsSpan","timerId","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","handleStartingBtn","timeDifference","time","convertMs","updateTimerDisplay","ms","days","hours","minutes","seconds","addLeadingZero","value"],"mappings":"2GAMA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAG3D,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,MAAMC,EAAeD,EAAc,CAAC,EACjCC,GAAgB,IAAI,MACnBC,EAAS,MAAM,CACX,MAAO,QACP,QAAS,oCACzB,CAAa,EACDV,EAAY,SAAW,KAEvBM,EAAmBG,EACnBT,EAAY,SAAW,GAE9B,CACL,EAEEW,EAAUZ,EAAgBQ,CAAO,EAEjCP,EAAY,iBAAiB,QAASY,CAAiB,EAEzD,SAASA,GAAmB,CACxBZ,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1BM,EAAU,YAAY,IAAM,CAExB,MAAMQ,EAAiBP,EADH,IAAI,KAGxB,GAAGO,GAAkB,EAAE,CACnB,cAAcR,CAAO,EACrBN,EAAe,SAAW,GAC1B,MACH,CAED,MAAMe,EAAOC,EAAUF,CAAc,EACrCG,EAAmBF,CAAI,CAC1B,EAAC,GAAI,CACV,CAGE,SAASC,EAAUE,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,SAASL,EAAmB,CAAC,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAE,CAC1DpB,EAAS,YAAcqB,EAAeJ,CAAI,EAC1ChB,EAAU,YAAcoB,EAAeH,CAAK,EAC5ChB,EAAY,YAAcmB,EAAeF,CAAO,EAChDhB,EAAY,YAAckB,EAAeD,CAAO,CACjD,CAED,SAASC,EAAeC,EAAM,CAC5B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAE,CAAC,CAClC,CAED,QAAQ,IAAIR,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC"}